##      API de Gesti√≥n de Usuarios      ##

Mini API RESTful para pruebas t√©cnicas.

##      Tecnolog√≠as     ##

- Node.js + Express
- PostgreSQL
- Arquitectura MVC

##      Instalaci√≥n   ##

```bash
git clone https://github.com/MauroGarcia-97/Prueba-Tecnica-BRM.git
cd Prueba-Tecnica-BRM
npm install
cp .env.example .env

##      Variables de entorno (.env)     ##

DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=users
PORT=3000

##      Script SQL    ##

Puedes usar el archivo init-db.sql para crear la base de datos y la tabla.

##      Correr en local     ##

npm run dev

##      Endpoints       ##

# Base URL

http://localhost:3000


# Endpoints Disponibles

# Obtener todos los usuarios

M√©todo: GET

Ruta: /users

Descripci√≥n: Devuelve la lista completa de usuarios.

Respuesta esperada:

{
  "message": "Lista de usuarios obtenida",
  "data": [
    {
      "id": 1,
      "name": "Juan P√©rez",
      "email": "juan@example.com"
    },
    ...
  ]
}


# Obtener un usuario por ID

M√©todo: GET

Ruta: /users/:id

Par√°metros: id del usuario

Ejemplo: /users/3

Respuesta exitosa:

{
  "message": "Usuario encontrado",
  "data": {
    "id": 3,
    "name": "Maria Lopez",
    "email": "maria@example.com"
  }
}

Error si no existe:

{
  "error": "Usuario no encontrado"
}


## Crear un nuevo usuario

M√©todo: POST

Ruta: /users

Cuerpo esperado (JSON):

{
  "name": "Nuevo Usuario",
  "email": "nuevo@correo.com",
  "password": "secreto123"
}

Respuesta exitosa:

{
  "message": "Usuario creado exitosamente",
  "data": {
    "id": 5,
    "name": "Nuevo Usuario",
    "email": "nuevo@correo.com"
  }
}


# Actualizar un usuario existente

M√©todo: PUT

Ruta: /users/:id

Par√°metros: id del usuario

Cuerpo esperado (JSON):

{
  "name": "Nombre Actualizado",
  "email": "nuevo@email.com",
  "password": "nuevoPass123"
}

Respuesta exitosa:

{
  "message": "Usuario actualizado correctamente",
  "data": {
    "id": 5,
    "name": "Nombre Actualizado",
    "email": "nuevo@email.com"
  }
}

Error si no existe:

{
  "error": "Usuario no encontrado"
}

# Eliminar un usuario

M√©todo: DELETE

Ruta: /users/:id

Par√°metro: id del usuario

Respuesta exitosa:

{
  "message": "Usuario eliminado correctamente"
}

Error si no existe

{
  "error": "Usuario no encontrado"
}

##      Extras

Todos los mensajes est√°n centralizados en el archivo üìÑ src/constants/messages.js.

Las consultas SQL est√°n definidas en üìÑ src/constants/queries.js.